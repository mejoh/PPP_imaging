############################# Variable initiation #############################

#-------------------------- Variable intiation   ---------------------------------#
int iTrialsPerBlock = 34;				
int iNumCatchTrialsPerBlock = 4;		# About 10% of trials in each block are catch trials (actually a little less)
int iNumBlocks = 2;
int iTotalNumTrials = (iNumBlocks * iTrialsPerBlock);
int iRespCountOld;
int iDurWait;
int iTimeStamp;
int iTrialCount;
int iTotalTrialCount;
string sSubjectSession;
#int iSubject;
int iLastShimPulse;
int iWaitPulses = 5;
int iStartingPulseTime;
stimulus_data fixation;
stimulus_data cue;
response_data button_response;
int iNumCorrectResponses = 0;
int iNumIncorrectResponses = 0;
double dTotalReactionTime = 0;
double dPercentageCorrect;
double dMeanReactionTime;
array <int> iDistributionResponsesInt[4] = { 0, 0, 0, 0 };
array <int> iDistributionCorrectResponsesInt[4] = { 0, 0, 0, 0 };

#------------------------------------ Files --------------------------------------#
string sOutputFilename;

# --------------------- Output file variable initiation ---------------------------#
output_file OutputFile = new output_file;
string TrialData;
array <string> asTask[iTotalNumTrials];
array <double> aiFixationTime[iTotalNumTrials];
array <double> aiCueTime[iTotalNumTrials];
array <double> aiResponseTime[iTotalNumTrials];
array <double> aiReactionTime[iTotalNumTrials];
array <int> aiButtonPressed[iTotalNumTrials];
array <int> aiButtonExpected[iTotalNumTrials];
array <string> asCorrectResponse[iTotalNumTrials];
array <int> ai3ChoiceExpButtons[4] = { 123, 124, 134, 234 };	# The 3 possible button choices are stored as a 3-digit integer in the array aiButtonExpected
array <int> ai3ChoiceCorrButtons[4][3] = { {1,2,3}, {1,2,4}, {1,3,4}, {2,3,4} };	# Elements are matched with responses later to identify correct/ false responses
array <int> ai2ChoiceExpButtons[6] = { 12, 13, 14, 23, 24, 34 };	# The 2 possible button choices are stored as a 2-digit integer in the array aiButtonExpected
array <int> ai2ChoiceCorrButtons[6][2] = { {1,2}, {1,3}, {1,4}, {2,3}, {2,4}, {3,4} }; # Elements are matched with responses later to identify correct/ false responses

#------------------------------ Pseudorandomization trials & initiation of for randomization required variables ----------------------------------#
array <int> aiBlock[0];
array <int> aiBlock1[34] = {13,10,1,2,4,18,3,2,3,4,28,6,8,12,1,12,23,4,3,10,13,5,14,7,1,3,1,2,2,25,9,8,11,5};
array <int> aiBlock2[34] = {8,6,3,4,3,21,2,2,1,1,16,11,7,9,2,12,29,2,1,10,12,5,13,13,1,4,3,4,3,28,5,8,14,10};

### Arrays above were generated using the randomization scheme below:
#array <int> aiMiniBlocks1[14] = { 7, 3, 0, 4, 0, 8, 1, 6, 0, 2, 10, 5, 0, 9 };
#array <int> aiEXTtrials[15] = { 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4 };
#array <int> aiINTtrials[15] = { 5, 5, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 13, 14 };
#aiEXTtrials.shuffle();
#aiINTtrials.shuffle();
#
#array <int> aiBlock[0];
#int iExtCount = 0;
#int iIntCount = 0;
#int iElement;
#
#loop int iIndex = 1
#until iIndex > aiMiniBlocks1.count()
#begin
#	if ( aiMiniBlocks1[iIndex] > 0 && aiMiniBlocks1[iIndex] < 6 ) then
#		loop iElement = 1
#		until iElement > aiMiniBlocks1[iIndex]
#		begin
#			iExtCount = iExtCount + 1;
#			aiBlock.add( aiEXTtrials[iExtCount] );
#			iElement = iElement + 1;
#		end;
#	elseif ( aiMiniBlocks1[iIndex] > 5 ) then
#		loop iElement = 1
#		until iElement > ( aiMiniBlocks1[iIndex] - 5 )
#		begin
#			iIntCount = iIntCount + 1;
#			aiBlock.add( aiINTtrials[iIntCount] );
#			iElement = iElement + 1;
#		end;
#	elseif ( aiMiniBlocks1[iIndex] == 0 ) then
#		aiBlock.add( random( 16, 29 ) );
#	end;			# no else, nothing is done if -1
#	iIndex= iIndex + 1;
#end;
#
#term.print_line( aiBlock );
